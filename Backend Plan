Backend Plan ⚙️ (FastAPI)
Overview 🌐
The backend will handle user authentication, report storage, AI agent integrations, and provide RESTful APIs to the frontend. It will use FastAPI for creating the server and MongoDB for storing user and report data.

Tech Stack 🛠️
Backend Framework: FastAPI 🚀

Database: MongoDB 🗄️

Cloud Storage: Firebase Storage (for storing reports and images) ☁️

Authentication: Firebase Authentication 🔐

API Communication: RESTful API 🌐

Middleware: Custom error handling and authentication middleware ⚙️

Folder Breakdown 📂

backend/
├── controllers/                   # Handles business logic for routes
│   ├── auth_controller.py         # 🔐 Handles user authentication (login, register).
│   ├── report_controller.py       # 📄 Manages report uploads, storage, and metadata.
│   └── user_controller.py         # 👤 Handles user profile and data management.
├── models/                        # MongoDB models
│   ├── user.py                    # 👤 MongoDB model for user data.
│   ├── report.py                  # 📄 MongoDB model for report metadata (name, type, date).
│   └── progress_data.py           # 📊 MongoDB model for storing cancer progression data (scores, metrics).
├── routes/                        # API routes
│   ├── auth_routes.py             # 🔐 API routes for authentication-related tasks.
│   ├── report_routes.py           # 📄 API routes for handling report uploads, analysis, and retrieval.
│   └── user_routes.py             # 👤 API routes for user data.
├── services/                      # Business logic and external integrations
│   ├── mongo_service.py           # 🗄️ Service for handling MongoDB operations.
│   └── ai_service.py              # 🤖 Service for handling communication with AI agents.
├── utils/                         # Utility functions and middleware
│   ├── auth_middleware.py         # 🔐 Middleware to verify authentication tokens.
│   └── error_handler.py           # ❌ Global error handler.
├── main.py                        # ⚙️ FastAPI main app configuration.
├── server.py                      # 🚀 Server initialization and startup.
└── requirements.txt               # 📦 Dependencies for the FastAPI backend.
API Endpoints 🌐
POST /login: Authenticate users and provide tokens. 🔐

POST /uploadReport: Handle the upload of medical reports and store them in Firebase Storage. Metadata is saved in MongoDB. 📤

GET /reports/{userId}: Retrieve a list of reports for a user, along with their metadata and analysis. 📄

POST /query: Handle user queries, passing them to the AI backend and returning responses. 🤖

GET /progress/{userId}: Fetch the user’s progress data based on historical reports and cancer progression metrics. 📊

Services ⚙️
mongo_service.py: Contains utility functions to interact with MongoDB for storing and retrieving user data, reports, and progress. 🗄️

ai_service.py: Integrates with the AI agents (for text analysis, image processing, etc.). This service calls the AI microservices hosted in the ai-agents folder. 🤖
